const searchIndex = new Map(JSON.parse('[\
["main",{"doc":"","t":"H","n":["main"],"q":[[0,"main"],[1,"std::io::error"]],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[1,"tuple"],[8,"Result",1]],"b":[]}],\
["ocaml_gen",{"doc":"OCaml-gen","t":"YYFKKYNNNQCQQQQQNNNNXNNNNNNMMNQCNNNNMEQQQQQ","n":["CustomType","Enum","Env","OCamlBinding","OCamlDesc","Struct","add_alias","borrow","borrow_mut","const_random","conv","decl_fake_generic","decl_func","decl_module","decl_type","decl_type_alias","default","drop","fmt","from","func","get_type","into","nested","new","new_module","new_type","ocaml_binding","ocaml_desc","parent","paste","prelude","root","try_from","try_into","type_id","unique_id","Env","decl_fake_generic","decl_func","decl_module","decl_type","decl_type_alias"],"q":[[0,"ocaml_gen"],[37,"ocaml_gen::prelude"],[43,"core::fmt"],[44,"core::fmt"],[45,"core::option"],[46,"core::result"],[47,"core::any"]],"d":["Derives implementations for <code>OCamlDesc</code> and <code>OCamlBinding</code> on …","The Enum derive macro. It generates implementations of …","The environment at some point in time during the …","<code>OCamlBinding</code> is the trait implemented by types to generate …","<code>OCamlDesc</code> is the trait implemented by types to facilitate …","The Struct derive macro. It generates implementations of …","Adds a new alias for the current scope (module).","","","","Implementations of <code>crate::OCamlDesc</code> for types that have …","Creates a fake generic. This is a necessary hack, at the …","Declares the binding for a given function","Creates a module","Declares the binding for a given type","Declares a new OCaml type that is made of other types","","This makes sure that we close our OCaml modules (with the …","","Returns the argument unchanged.","A macro to create OCaml bindings for a function that uses …","Retrieves a type that was declared previously. A boolean …","Calls <code>U::from(self)</code>.","how deeply nested are we currently? (default is 0)","Creates a new environment.","Create a module and enters it.","Declares a new type. If the type was already declared, …","will generate the OCaml bindings for a type (called root …","describes the type in OCaml, given the current environment …","called when we exit a module","","To use the library, you can simply import the prelude as …","you can call this to go back to the root and finalize the …","","","","Returns a unique ID for the type. This ID will not change …","","Creates a fake generic. This is a necessary hack, at the …","Declares the binding for a given function","Creates a module","Declares the binding for a given type","Declares a new OCaml type that is made of other types"],"i":[0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,14,15,1,0,0,1,1,1,1,15,0,0,0,0,0,0],"f":[0,0,0,0,0,0,[[1,2,3],4],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[],1],[1,4],[[1,5],6],[-1,-1,[]],0,[[1,2,3],[[4,[7,8]]]],[-1,-2,[],[]],[1,9],[[],1],[[1,3],7],[[1,2,3],4],[[1,[10,[3]],8],7],[[1,[11,[3]]],7],[1,7],0,0,[1,7],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[],2],0,0,0,0,0,0],"c":[],"p":[[5,"Env",0],[1,"u128"],[1,"str"],[1,"tuple"],[5,"Formatter",43],[8,"Result",43],[5,"String",44],[1,"bool"],[1,"usize"],[6,"Option",45],[1,"slice"],[6,"Result",46],[5,"TypeId",47],[10,"OCamlBinding",0],[10,"OCamlDesc",0]],"b":[]}],\
["ocaml_gen_derive",{"doc":"<strong>This crate is not meant to be imported directly by users</strong>. …","t":"YYYX","n":["CustomType","Enum","Struct","func"],"q":[[0,"ocaml_gen_derive"]],"d":["Derives implementations for <code>OCamlDesc</code> and <code>OCamlBinding</code> on …","The Enum derive macro. It generates implementations of …","The Struct derive macro. It generates implementations of …","A macro to create OCaml bindings for a function that uses …"],"i":[0,0,0,0],"f":[0,0,0,0],"c":[],"p":[],"b":[]}],\
["ocamlgen_test_stubs",{"doc":"","t":"FFFNNNNNNHHHHHHHHHHHHHHHNNNNNNNNNNNNHHNNNNNNHHHHHHHHHHHHNNNNNNNNNNNN","n":["Car","Package","SingleTuple","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create_toyota","create_toyota_to_ocaml","fn_five_parameters","fn_five_parameters_to_ocaml","fn_four_parameters","fn_four_parameters_to_ocaml","fn_one_parameter","fn_one_parameter_to_ocaml","fn_six_parameters","fn_six_parameters_bytecode","fn_six_parameters_to_ocaml","fn_three_parameters","fn_three_parameters_to_ocaml","fn_two_parameters","fn_two_parameters_to_ocaml","from","from","from","from_value","from_value","from_value","into","into","into","into_value","into_value","into_value","new","new_to_ocaml","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","ocaml_desc","pack_present","pack_present_to_ocaml","print","print_to_ocaml","test_add_i32","test_add_i32_to_ocaml","test_add_usize","test_add_usize_to_ocaml","test_bytes_get","test_bytes_get_to_ocaml","test_get_ascii_code","test_get_ascii_code_to_ocaml","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_id","unique_id","unique_id"],"q":[[0,"ocamlgen_test_stubs"],[68,"ocaml::value"],[69,"ocaml_gen"],[70,"core::option"],[71,"alloc::string"],[72,"ocaml::value"],[73,"ocaml::value"],[74,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,8,9,10,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,8,9,10,8,9,10,8,9,10,0,0,8,9,10,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,8,9,10,8,9,10,8,9,10],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[2,[4,[3]]],5],[[1,1,1,1,1],1],[[2,[4,[3]]],5],[[1,1,1,1],1],[[2,[4,[3]]],5],[1,1],[[2,[4,[3]]],5],[[1,1,1,1,1,1],1],[[6,7],1],[[2,[4,[3]]],5],[[1,1,1],1],[[2,[4,[3]]],5],[[1,1],1],[[2,[4,[3]]],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,8],[6,9],[6,[[10,[-1]]],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,12],6],[[9,12],6],[[[10,[-1]],12],6,13],[1,1],[[2,[4,[3]]],5],[[2,[4,[3]],14],5],[[2,[4,[3]],14],5],[[2,[4,[3]],14],5],[[2,[15,[3]]],5],[[2,[15,[3]]],5],[[2,[15,[3]]],5],[1,1],[[2,[4,[3]]],5],[1,1],[[2,[4,[3]]],5],[[1,1],1],[[2,[4,[3]]],5],[[1,1],1],[[2,[4,[3]]],5],[[1,1],1],[[2,[4,[3]]],5],[1,1],[[2,[4,[3]]],5],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[],18],[[],18],[[],18]],"c":[],"p":[[5,"Raw",68],[5,"Env",69],[1,"str"],[6,"Option",70],[5,"String",71],[6,"Value",68],[1,"i32"],[5,"SingleTuple",0],[5,"Car",0],[5,"Package",0],[10,"FromValue",68],[5,"OCamlRuntime",72],[10,"IntoValue",68],[1,"bool"],[1,"slice"],[6,"Result",73],[5,"TypeId",74],[1,"u128"]],"b":[]}]\
]'));
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
