;; generate static lib from rust code

(rule
 (deps
  expected_bindings.ml
  (source_tree ocamlgen_test_stubs))
 (targets libocamlgen_test_stubs.a dllocamlgen_test_stubs.so bindings.ml)
 (action
  (no-infer
   (progn
    (run cargo build --release --target-dir %{project_root}/target)
    ;; Copy .a
    (run
     cp
     %{project_root}/target/release/libocamlgen_test_stubs.a
     libocamlgen_test_stubs.a)
    ;; Copy .so + support macos
    (with-accepted-exit-codes
     (or 0 1)
     (run
      cp
      %{project_root}/target/release/libocamlgen_test_stubs.so
      dllocamlgen_test_stubs.so))
    (with-accepted-exit-codes
     (or 0 1)
     (run
      cp
      %{project_root}/target/release/libocamlgen_test_stubs.dylib
      dllocamlgen_test_stubs.so))
    (run cargo run --bin main --release --target-dir %{project_root}/target)))))

;; test library

(library
 (name ocamlgen_test_lib)
 (public_name ocamlgen-test)
 (modules lib bindings)
 (foreign_archives ocamlgen_test_stubs))

;; test executable (links to the library)

(executable
 (name ocamlgen_test)
 (modules ocamlgen_test)
 (libraries ocamlgen_test_lib))

;; rule for running the tests (runs the executable)

(rule
 (alias runtest)
 (action
  (run ./ocamlgen_test.exe)))
